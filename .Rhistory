# Data time series contoh
datama <- c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,
115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140)
# Membuat data time series
otr <- ts(datama, start = c(1949, 1), frequency = 12)
plot(otr, main = "Original Time Series", col = "blue")
# Moving average dengan jendela 3 bulan
ma_3 <- stats::filter(otr, filter = rep(1/3, 3), sides = 2)
# Moving average dengan jendela 5 bulan
ma_5 <- stats::filter(otr, filter = rep(1/5, 5), sides = 2)
# Plot hasil moving average
plot(otr, main = "Moving Average (3 dan 5 bulan)", col = "blue")
lines(ma_3, col = "red", lwd = 2)  # 3 bulan
lines(ma_5, col = "green", lwd = 2)  # 5 bulan
legend("topright", legend = c("Original", "MA (3)", "MA (5)"),
col = c("blue", "red", "green"), lty = 1, lwd = 2)
decompose(LakeHuron)
data()
decompose(Nile)
decompose(airquality)
library(forecast)
decompose(airquality)
library(forecast)
decompose(otr)
str(otr)
# Menambahkan kolom waktu sebagai prediktor
dataotr <- data.frame(
time = time(otr),
y = as.numeric(otr)
)
# Model regresi linear
modellm <- lm(y ~ time, data = dataotr)
summary(modellm)  # Menampilkan hasil regresi
library(lmtest)
dwtest(modellm)
head(JohnsonJohnson)
str(JohnsonJohnson)
str(LakeHuron)
# Menambahkan kolom waktu sebagai prediktor
datajj <- data.frame(
time = time(JohnsonJohnson),
y = as.numeric(JohnsonJohnson)
)
# Model regresi linear
modellm <- lm(y ~ time, data = datajj)
summary(modellm)  # Menampilkan hasil regresi
library(lmtest)
dwtest(modellm)
data$diff_y <- diff(data$y)
data$diff_y <- diff(dataotr$y)
dataotr
library(forecast)
auto.arima(LakeHuron)
library(forecast)
auto.arima(lynx)
str(lynx)
auto.arima(lynx)
library(forecast)
adf.test(lynx)
library(forecast)
library(tseries)
adf.test(lynx)
auto.arima(lynx)
library(forecast)
library(tseries)
adf.test(lynx)
acf(lynx,lag=100)
bitcoin
bitcoin<- read.csv("~/R/HistoricalData_1632919941795.csv", sep="")
bitcpoin
bitcoin<- read.csv("~/R/HistoricalData_1632919941795.csv", sep="")
bitcoin
bitcoindate<-as.Date(bitcoin$Date,"%m/%d/%Y")
bitcoindate
head(bitcoindate)
#saya memanggil (call) dua paket zoo dan xts
library(zoo)
library(xts)
#setelah dapat data date membuat ts dengan harga close
bitcoints=xts(bitcoin$Close.Last,bitcoindate)
head(bitcoints)
library(ggplot2)
autoplot(bitcoinxts) +
labs(title = "Plot Data xts", x = "Tanggal", y = "Nilai") +
theme_minimal()
library(ggplot2)
autoplot(bitcoints) +
labs(title = "Plot Data xts", x = "Tanggal", y = "Nilai") +
theme_minimal()
# Runs Test untuk data xts
runs_test <- runs.test(coredata(bitcoints))
# Runs Test untuk data xts
library(randtest)
# Runs Test untuk data xts
library(randtests)
install.packages("randtests")
# Runs Test untuk data xts
library(randtests)
runs_test <- runs.test(coredata(bitcoints))
print(runs_test)
library(tseries)
vr_test<-Auto.VR(bitcoints)
VR(bitcoints)
# Konversi data xts ke vektor numerik
data_values <- coredata(bitcoints)
# Uji Ljung-Box
ljung_box_test <- Box.test(data_values, lag = 10, type = "Ljung-Box")
print(ljung_box_test)
library(tseries)
adf.test(bitcoints)
bitcoints2<-diff(bitcoints)
bitcoints2<-diff(bitcoints)
dbitcoints<-na.remove(bitcoints2)
bitcoints2<-diff(bitcoints)
dbitcoints<-na.remove(bitcoints2)
adf.test(dbitcoints)
# Runs Test untuk data xts
library(randtests)
runs_test <- runs.test(coredata(dbitcoints))
runs_test <- runs.test(dbitcoints)
print(runs_test)
# Runs Test untuk data xts
library(randtests)
runs_test <- runs.test(dbitcoints)
print(runs_test)
# Konversi data xts ke vektor numerik
data_values <-(dbitcoints)
# Uji Ljung-Box
ljung_box_test <- Box.test(data_values, lag = 10, type = "Ljung-Box")
print(ljung_box_test)
closetlkm
library(quantmod)
price_bbri <- getSymbols("BBRI.JK", auto.assign=FALSE, from="2014-01-01", to="2019-12-31")
head(price_bbri)
bitcoinforecasts <- HoltWinters(dbitcoints, beta=FALSE, gamma=FALSE)
print(bitcoinforecasts)
bitcoinforecasts <- HoltWinters(dbitcoints, beta=FALSE, gamma=FALSE)
#untuk memeriksa residual
bitcoinforecasts$fitted
bitcoinforecasts <- HoltWinters(dbitcoints, beta=FALSE, gamma=FALSE)
#untuk memeriksa residual
head(bitcoinforecasts$fitted)
bitcoinforecasts <- HoltWinters(dbitcoints, beta=FALSE, gamma=FALSE)
print(bitcoinforecasts)
#untuk memeriksa residual ditampilkan lima baris saja
head(bitcoinforecasts$fitted)
bitcoinforecasts2 <- HoltWinters(dbitcoints,  gamma=FALSE)
print(bitcoinforecasts2)
#untuk memeriksa residual ditampilkan lima baris saja
head(bitcoinforecasts2$fitted)
bitcoinforecasts3 <- HoltWinters(dbitcoints)
library(forecast)
library(tseries)
adf.test(lynx)
acf(lynx,lag=100)
auto.arima(lynx)
modelarimalynx<-auto.arima(lynx)
summary(modelarimalynx)
checkresiduals(modelarimalynx)
Box.test(residuals(modelarimalynx), lag = 10, type = "Ljung-Box")
actual <- lynx[1:100]
predicted <- fitted(modelarimalynx)
error <- actual - predicted
actual <- lynx
error <- actual - predicted
error
rmse <- sqrt(mean(error^2))
rmse
head(lynx)
lynx
library(FinTS)
library(FinTS)
ArchTest(residuals(modelarimalynx))
sarima_model_lynx <- auto.arima(lynx, seasonal = TRUE)
print(sarima_model_lynx)
plot(lynx)
etslynx<-ets(lynx)
print(etslynx)
HoltWinters(log(dbitcoints))
HoltWinters(dbitcoints)
logdbitcoints<-log(dbitcoints)
library(forecast)
modelets<-ets(dbitcoints,model="AAA")
dbitcoints
library(forecast)
modelets<-ets(lynx,model="AAA")
is.ts(dbitcoints)
str(dbitcoints)
head(bitcoints)
head(bitcoints2)
library(forecast)
modelets<-ets(bitcoints2,model="AAA")
library(forecast)
modelets<-ets(AirPassengers,model="AAA")
print(modelets)
accuracy(etsmodel)
accuracy(modelets)
library(rugarch)
EuroStockMarket
data("EuStockMarkets")
# Data EuStockMarkets
data("EuStockMarkets")
# Ambil salah satu indeks saham, misalnya DAX (Jerman)
dax <- EuStockMarkets[, "DAX"]
# Plot data
plot(dax, main = "DAX Index", col = "blue", ylab = "Price")
# Hitung log-return untuk membuat data stasioner
dax_return <- diff(log(dax))  # Logarithmic return
plot(dax_return, main = "Log Return of DAX", col = "red", ylab = "Log Return")
# Plot residual standar
plot(garch_fit, which = "all")
# Definisikan spesifikasi model GARCH(1,1)
garch_spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"  # Distribusi error normal
)
library(rugarch)
library(tseries)
library(quantmod)
# Definisikan spesifikasi model GARCH(1,1)
garch_spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"  # Distribusi error normal
)
# Estimasi model GARCH
garch_fit <- ugarchfit(spec = garch_spec, data = dax_return)
# Ringkasan hasil estimasi
print(garch_fit)
# Plot residual standar
plot(garch_fit, which = "all")
par(mar = c(4, 4, 2, 1))  # Format: c(bawah, kiri, atas, kanan)
# Plot residual standar
plot(garch_fit, which = "all")
bptest(modellm)
library(lmtest)
bptest(modellm)
# Histogram residuals
hist(modellm$residuals, main = "Histogram of Residuals", xlab = "Residuals")
# QQ Plot
qqnorm(modellm$residuals)
qqline(modellm$residuals, col = "red")
# Uji Shapiro-Wilk
shapiro.test(modellm$residuals)
urca
